name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: My_Java_Maven_Demo

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache ~/.m2/repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Show Java & Maven versions
        run: |
          java -version
          mvn -v

      - name: Create Maven settings.xml (for Artifactory if needed)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>artifactory-repo</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build & test (Maven)
        run: mvn -B -DskipTests=false clean verify

      - name: SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B sonar:sonar \
              -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
              -Dsonar.login=${{ env.SONAR_TOKEN }} \
              -Dsonar.projectKey=${{ github.repository }} 

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REPO }}:${{ github.sha }}

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: latest

      - name: Configure JFrog CLI
        run: jfrog rt config --url=${{ secrets.ARTIFACTORY_URL }} --user=${{ secrets.ARTIFACTORY_USER }} --password=${{ secrets.ARTIFACTORY_PASSWORD }} --interactive=false

      - name: Upload artifact (jar) to Artifactory
        run: |
          ls -la target
          jfrog rt upload "target/*.jar" "${{ secrets.ARTIFACTORY_REPO }}/my-java-frontend/${{ github.run_number }}/" --flat=true
