name: CI

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: My_Java_Maven_Demo

jobs:
  # -------------------- BUILD, TEST, SONAR, DEPLOY --------------------
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache ~/.m2/repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Create Maven settings.xml (with Artifactory creds)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>artifactory-repo</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build, Test, Sonar, Deploy to maven-local
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B clean verify sonar:sonar deploy \
            -Dsonar.projectKey=viveksurya883_My_Java_Maven_Demo \
            -Dsonar.organization=viveksurya883 \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

  # -------------------- DOCKER --------------------
  docker:
    runs-on: ubuntu-latest
    needs: build-deploy
    outputs:
      digest: ${{ steps.push-image.outputs.digest }}
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: latest

      - name: Configure JFrog CLI
        run: |
          jf c add my-artifactory \
            --url="https://trialz1c1tf.jfrog.io" \
            --user="${{ secrets.ARTIFACTORY_USER }}" \
            --password="${{ secrets.ARTIFACTORY_PASSWORD }}" \
            --interactive=false
          jf rt ping --server-id=my-artifactory

      - name: Download JAR from maven-local (for Docker build)
        run: |
          mkdir -p target
          jf rt download "maven-local/com/example/my_java_maven_demo/0.0.1-SNAPSHOT/my_java_maven_demo-0.0.1-SNAPSHOT.jar" target/ --flat=true --server-id=my-artifactory
          ls -la target

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/my_java_maven_demo:${{ github.sha }} .

      - name: Push Docker image
        id: push-image
        run: |
          IMAGE_NAME=docker.io/${{ secrets.DOCKER_USERNAME }}/my_java_maven_demo:${{ github.sha }}
          docker push $IMAGE_NAME

          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME | awk -F'@' '{print $2}')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT


  AKS-Deployment:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Update deployment to new digest image
        env:
          IMAGE_DIGEST: ${{ needs.docker.outputs.digest }}
        run: |
          echo "Updating deployment to use image digest: $IMAGE_DIGEST"

          # use the digest to set the exact image
          kubectl set image deployment/my-java-demo my-java-demo=docker.io/${{ secrets.DOCKER_USERNAME }}/my_java_maven_demo@$IMAGE_DIGEST

          # wait for rollout to finish
          kubectl rollout status deployment/my-java-demo --timeout=180s

          # optional: print pod logs for verification
          POD=$(kubectl get pods -l app=my-java-demo -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD --tail=50 || true
