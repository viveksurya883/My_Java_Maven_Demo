name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: My_Java_Maven_Demo

jobs:
  # -------------------- INIT --------------------
  init:
    runs-on: ubuntu-latest
    outputs:
      m2-cache-key: ${{ steps.cache-m2.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Cache ~/.m2/repository
        id: cache-m2
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Create Maven settings.xml (for Artifactory)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>artifactory-repo</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

  # -------------------- BUILD, TEST & PACKAGE --------------------
  build-package:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
            distribution: temurin
            java-version: 17
            cache: maven

      - name: Build & Test & Package (Maven)
        run: mvn -B clean verify package -DskipTests=false

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

        # -------------------- SONARQUBE --------------------
  sonarqube:
    runs-on: ubuntu-latest
    needs: build-package
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
            distribution: temurin
            java-version: 17
            cache: maven

      - name: Run SonarQube Analysis
        run: |
         mvn -B verify sonar:sonar \
         -Dsonar.projectKey=viveksurya883_My_Java_Maven_Demo \
         -Dsonar.organization=viveksurya883 \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.login=${{ secrets.SONAR_TOKEN }}


  # -------------------- DOCKER --------------------
  docker:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/my_java_maven_demo:latest .

      - name: Push Docker image
        run: docker push docker.io/${{ secrets.DOCKER_USERNAME }}/my_java_maven_demo:latest


  # -------------------- ARTIFACTORY --------------------
  publish-artifact:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and cache Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
         version: latest

      - name: Configure JFrog CLI
        run: |
         jf c add my-artifactory \
         --url=https://trialz1c1tf.jfrog.io \
         --user="${{ secrets.ARTIFACTORY_USER }}" \
         --password="${{ secrets.ARTIFACTORY_PASSWORD }}" \
         --interactive=false

      - name: Upload artifact (JAR)
        run: jf rt upload "target/*.jar" "libs-snapshot-local/my_java_maven_demo/1.0.${{ github.run_number }}/" --flat=true --server-id=my-artifactory



